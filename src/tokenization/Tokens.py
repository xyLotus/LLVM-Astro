# ===================================
# - Official Astro Source Code -
# (\sa: https://github.com/xyLotus/Astro/blob/master/src/compiler/astro_types.py)
# ===================================
"""Contains the Astro token types and the
associated wrapper class for efficient use."""
# ===================================
# Dunder Credentials
# ===================================
__author__  = 'xyLotus, bellrise'
__version__ = '0.1'
# ===================================


class TokenType:
    """ Basically an enum of all token types. """

    SPACE   = 0   # ' '      (1 space)
    SYM     = 1   # [symbol] (alphanumerical)
    EXCL    = 2   # !

    LPAREN  = 3   # (
    RPAREN  = 4   # )
    LBRACK  = 5   # [
    RBRACK  = 6   # ]
    LBRACE  = 7   # {
    RBRACE  = 8   # }
    LCHEV   = 9   # <
    RCHEV   = 10  # >

    COMMA   = 11  # ,
    COLON   = 12  # :

    NAME    = 13  # [string_name] (alphanumerical)
    TAB     = 14  # '    '        (4 spaces)
    NEWLINE = 15  # \n
    ASSIGN  = 16  # =

    NONE    = 17  # placeholders
    QUOTE   = 18  # '
    DBQUOTE = 19  # "

    NUMBER  = 20  # [0-9]
    EOF     = 21

    @staticmethod
    def get(id_) -> str:
        """Return the name of the token from the passed ID. Returns NONE by
        default. """
        for name, value in TokenType.__dict__.items():
            if value == id_:
                return name
        return 'NONE'


class Token:
    """This class represents a single Token which can then be put into a list
    generated by the Tokenizer. """

    def __init__(self, id_=TokenType.NONE, value=''):
        self.id = id_
        self.value = value

    def __str__(self):
        """Generate a string representation of the Token using some reflective
        Python magic. """
        str_token = TokenType.get(self.id)
        return f'<Token id={str_token} value=\'{self.value}\'>'

    def __mul__(self, other: int) -> list:
        """Multiply the token n times. """
        if not isinstance(other, int):
            raise TypeError('cannot multiply token by non-int value')
        return [self for _ in range(other)]

    def __repr__(self):
        """Generate a string representation of the Token using some reflective
        Python magic. """
        return self.__str__()